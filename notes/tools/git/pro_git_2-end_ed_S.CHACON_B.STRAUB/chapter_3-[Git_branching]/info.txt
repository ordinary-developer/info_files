 
 Git Branching
 ############################

 When you make a commit, Git stores a commit object that contains a pointer
 to the snapshot of the content you staged.
 A branch in git is simply a lightweight movable pointer to one of these
 commits.
 As you start making commits, you're given a master branch that points
 to the last commit you made. Every time you commit, it moves forward
 automatically.

 creating branches
 -------------
 "git branch branch-name"
 will create a new branch (a new pointer at the same commit
 you're currently on) based on the current branch
 
 HEAD is a pointer to the local branch you're currently on.

 "git checkout branch-name"
 will switch to the branch-name

 "git checkout -b branch-name"
 will create and switch to the new branch

 It's best to have a clean working state when you switch branches.
 
 merging branches
 -------------
 "git merge branch-name"
 merges your current branch (contents of your current branch) with
 the branch-name branch

 "git branch --delete branch-name"
 will delete the branch with the name "branch-name"

 resolving conflicts during merging
 -------------
 If you changed the same part of the same file differently in the two
 branches you're merging together, Git won't be able to merge them cleanly.

 after typing
 "git checkout master"
 "git checkout -b iss53"
 editing file "filename"
 "git checkout master"
 "git checkout -b hotfix"
 editing the same file "filename"
 "git checkout master"
 "git merge hotfix"
 "git checkout iss53"
 editing the same file "filename"
 "git checkout master"
 "git merge iss53"
 you will see info about a merge conflict.
 you can see conflict files by
 "git status"
 You can have one or more conflict files.
 These files have the next structure
 -----------------------------------------------
 | text ... text (may be and may be not)       |
 | <<<<<<< HEAD                                |
 | text ... text                               |
 | =======                                     |
 | text ... text                               |
 | >>>>>>> [merge-branch-name]                 |
 | text ... text (my be and may be not)        |
 -----------------------------------------------
 This means the version in HEAD (your master branch,
 because that was what you had checked out when you ran
 your merge command) is the top part of the block 
 (everything between "<<<<<<< HEAD" and "======="),
 while the version in your "merge-branch-name" branch
 looks like everything in the bottom part 
 (everything between "=======" and ">>>>>>> [merge-branch-name]")

 In order to resolve the conflict, you have to either choose one side or
 the other or merge (edit) the contents yourself.
 After that the "<<<<<<<", "=======", ">>>>>>>" must be completely removed.

 the for each conflicted file
 "git add file"

 If all is good type
 "git commit"
 to finalize the merge commit
 You will shown an editor with some message

 showing branches
 --------------
 "git branch --color"
 will show all branches. A * means the branch you are currently on.

 "git branch --merged"
 will show the branches that you have merged into the branch
 you're currently on.

 "git branch --no-merged"
 will show the brances that you have not merged into the branch
 you're currently on.

 remote branches
 -------------
 "git push origin serverfix"
 or
 "git push push origin serverfix:serverfix"
 will push this branch to the server

 "git fetch origin"
 will copy pointers to server branches that you can't modify.

 to merge this work into your current working branch you can run
 "git merge origin/serverfix"
 or for master
 "git merge origin/master"

 If you want your own serverfix branch that you can work on,
 you can base it off your remote branch
 "git checkout -b serverfix origin/serverfix"
 that will create what is called a "tracking branch" (an "upstream branch")
 Tracking branches are local branches that have a direct relationship to
 a remote branch. If you're on a tracking branch and type "git pull",
 Git automatically knows which server to fetch from and branch to merge into.
 also a synonym for this command
 "git checkout --track origin/serverfix"

 If you already have a local branch and want to set it to a remote branch you
 just pulled down, or want to change the upstream branch you're tracking, type
 "git branch --set-upstream origin/serverfix"
 ("git branch -u origin/serverfix")

 When you have a tracking branche set up, you can reference it with the
 @{upstream} or @{u} shorthand. So if you're on the master branch and 
 it's tracking origin/master, you can say something like
 "git merge @{upstream}" instead of
 "git merge origin/master"
    
 to show full information about branches
 "git branch -vv"
 or
 "git branch --verbose --verbose"

 "git branch --remote"
 will show remote branches

 "git branch --all"
 will show all branches

 "git fetch --all"
 will take all from all remote servers

 To delete your serverfix branch from the server
 "git push origin --delete serverfix"

 git rebasing
 -------------
 Instead of merging you can use rebasing
 "git checkout -b experiment" (from master branch)
 "... //edit something"
 "git commit --all --message 'Add some functionality'"
 "git checkout master"
 "... //edit something"
 "git commit --all --message 'Add some other functionality'"
 "git checkout experiment"    -
 "git rebase master"           | -> rebase step
 "git checkout master"         |
 "git merge experiment"       -

 merge conflict
 "git checkout -b experiment" (from master branch)
 "... //edit a file"
 "git commit --all --message 'Add some functionality'"
 "git checkout master"
 "... //edit the same file"
 "git commit --all --message 'Add some other functionality'"
 "git checkout experiment"          -
 "git rebase master"                 |
 "...//edit a conflictt file (files) |
 "git add file"                      |-> rebase with conflict step
 "git rebase --continue"             |
 "git checkout master"               |
 "git merge experiment"             -
 
 "git pull --rebase"
 or
 "git fetch" && "git rebase teamone/master"


 DO NOT REBASE COMMITS THAT EXISTS OUTSIDE YOUR REPOSITORY!!!

 It is better to rebase local changes you've made but haven't shared yet
 before you push them in order to clean up your history, 
 but never rebase anything you've pushed somewhere.
